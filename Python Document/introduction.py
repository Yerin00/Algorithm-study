# -*- coding: utf-8 -*-
"""introduction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_x_jWGOa7qJCFDjj3n-zriiLjLbHoGGI
"""

# this is the first comment
spam = 1  # and this is the second comment
          # ... and now a third!
text = "# This is not a comment because it's inside quotes."
print(text)

# 3.1 파이썬을 계산기로 사용하기
2+2

50 - 5*6

(50 - 5*6) / 4 # 나누기(/)는 항상 floating point number를 return한다.

8 / 5

17 / 3 # 기본 나눗셈

17 // 3 # 소숫점 뒤를 모두 버린다.

17 % 3 # 나머지를 return한다.

5 * 3 + 2 # floored quotient * divisor + remainder

5 ** 2

2 ** 7

width = 20
height = 5 * 9
width * height

# n # try to access an undefined variable

4 * 3.75 - 1

tax = 12.5/100
price = 100.50
price * tax

price + _ # 마지막에 인쇄된 표현식은 변수 _에 대입됩니다.

round(_,2)

# 3.1.2 문자열
'spam eggs'

'does\'t'

'"Yes," they said.'

"\"Yes,\" they said."

'"Isn\'t." they said.'

print('"Isn\'t." they said.') # print() 함수는 따옴표를 생략하고, 이스케이핑된 특수문자를 출력해서 더 읽기 쉬운 출력을 만들어냅니다.

s = 'First line.\nSecond line.'

s # print()를 사용하지않으면 결과에 포함되지않음

print(s)

print('C:\some\name')
print(r'C:\some\name') # 첫  따옴표 앞에 r 을 붙여서 날 문자열(raw string)을 만들 수 있습니다.

# """ """ 또는 ''' '''으로 문자열을 여러줄로 확장할 수 있다.
print("""\
Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to
""")

3 * 'un' + 'ium' # 문자열은 + 연산자로 이어붙이고, * 연산자로 반복

'Py''thon' # 두 개 이상의 문자열이 연속 -> 자동으로 이어붙여짐

text = ('Put several strings within parentheses ''to have them joined together.')
text

# 두개의 literal에만 적용될 뿐 변수나 표현식에는 해당하지 않습니다.
prefix='Py'
#prefix 'thon'

#('un' * 3) 'ium'

word = 'Python'

word[5]

word[-2] # 음수인 경우 끝에서 부터 센다. 음수 인덱스는 -1부터

word[0:2] # 슬라이싱(부분 문자열) [주의]: 시작점은 포함되지만 종료지점은 포함되지않는다.

word[4:]

word[-2:]

word[:2] + word[2:]

word[:4] + word[4:]

#word[42] # 범위 벗어나는 인덱스는 에러

word[4:42] # 범위를 벗어나는 슬라이스 인덱스는 자동처리됨

word[42:]

# 파이썬은 문자열을 변경할 수 없다. 에러
#word[0] = 'J' 
#word[2:] = 'py'

'J' + word[1:] # 문자열을 새로 만들어야함

word[:2] + 'py'

s = 'supercalifragilisticexpialidocious'
len(s) # 문자열 길이

# 3.1.3 리스트
squares = [1, 4, 9, 16, 25]
squares
squares[0]
squares[-1]
squares[-3:]

squares[:] # 얕은 복사본

# 얕은 복사는 새로운 복합 객체를 만들고,(가능한 범위까지) 원본 객체를 가리키는 참조를 새로운 복합 객체에 삽입합니다.
# 깊은 복사는 새로운 복합 객체를 만들고,재귀적으로 원본 객체의 사본을 새로 만든 복합 객체에 삽입합니다.

squares + [36, 49, 64, 81, 100] # 이어붙이기

cubes = [1, 8, 27, 65, 125] # 리스트는 문자열과 달리 변경가능
cubes[3] = 64
cubes

cubes.append(216) # 끝에 새 항목 추가
cubes.append(7**3)
cubes

letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']

letters[2:5] = ['C', 'D', 'E'] # 대체
letters

letters[2:5] = [] # 삭제
letters

letters[:] = [] # clear the list by replacing all the elements with an empty list
letters

letters = ['a', 'b', 'c', 'd']
len(letters)

a=['a','b','c']
n=[1,2,3]
x=[a,n]
x

x[0]

x[0][1]

# 3.2 프로그래밍으로의 첫 걸음
# 피보나치 수열 앞부분 계산
a, b = 0, 1
while a<10 :
  print(a)
  a, b = b, a+b

i=256*256
print('The value of i is', i)

a, b=0, 1
while a<1000:
  print(a, end='.') # 키워드 인자 end 는 출력 끝에 포함되는 개행문자를 제거하거나 출력을 다른 문자열로 끝나게 하고 싶을 때 사용됩니다
  a, b = b, a+b