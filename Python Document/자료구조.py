# -*- coding: utf-8 -*-
"""자료구조.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MhY0mjtA9qlxMbPq5ZQ7O3nd_JTyU_jT
"""

# 5.자료구조
# 5.1 리스트 더보기
fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana']

fruits.count('apple')

fruits.index('banana')

fruits.index('banana', 4)  # 4를 시작점으로 다음에 나타나는 'banana'의 index를 찾기

fruits.reverse()
fruits

fruits.append('grape')
fruits

fruits.sort() # a,b,c 순서대로 정렬
fruits

# 리스트에서 주어진 위치의 항목을 삭제하고 그 항목을 return한다.
# 지정하지않으면 마지막 항목
fruits.pop()

fruits.remove('apple')
fruits

animal = ['하마', '고양이', '사자', '말'] # 가,나,다 순서대로 정렬
animal.sort()
animal

# 5.1.1 리스트를 스택으로 사용하기
# 마지막에 넣은 요소가 처음으로 꺼내지는 요소(LIFO)
stack = [3, 4, 5]
stack.append(6)
stack.append(7)
stack

stack.pop()

stack

# 5.1.2 리스트를 큐로 사용하기
# 큐(FIFO), 리스트는 큐에 적합하지않으므로 다음을 사용
from collections import deque
queue = deque(["Eric", "John", "Michael"])

queue.append("Terry")
queue.append("Graham")
queue.popleft()

queue.popleft()

queue

# 5.1.3 리스트 컴프리헨션
# 리스트를 만드는 간결한 방법 제공
# 제곱수의 리스트
squares = []
for x in range(10):
  squares.append(x**2)
squares

squares = list(map(lambda x: x**2, range(10))) # map은 for문 없이 모든 요소에 대해 반복처리를 가능하게 해줌.
squares

squares = [x**2 for x in range(10)]
squares

# 두 리스트의 요소들을 서로 같지 않은 것끼리 결합하는 리스트 컴프리헨션
[(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]

# 위와 같음, 이중for문 + if 조건절
combs = []
for x in [1,2,3]:
  for y in [3,1,4]:
    if x != y:
      combs.append((x,y))

combs

# 리스트 컴프리헨션은 복잡한 표현식과 중첩된 함수들을 포함할 수 있음
vec = [-4, -2, 0, 2, 4]
[x*2 for x in vec]

[x for x in vec if x>= 0]

[abs(x) for x in vec]

freshfruit = [' banana   ', ' loganberry   ', '  passion fruit '] # strip(): 공백제거
[weapon.strip() for weapon in freshfruit]

# create a list of 2-tuples like (number, square)
 [(x, x**2) for x in range(6)]

# flatten a list using a listcomp with two 'for'
vec = [[1,2,3], [4,5,6], [7,8,9]]
[num for elem in vec for num in elem]

# 위와 똑같은거
a = []
for elem in vec:
  for num in elem:
    a.append(num)
print(a)

from math import pi
# round(a, b)는 a를 i번째 소수점 자리까지 표현해준다. i+1번째에서 반올림해줌.
[str(round(pi,i)) for i in range(1,6)]

# 5.1.4 중첩된 리스트 컴프리헨션
matrix = [
          [1,2,3,4],
          [5,6,7,8],
          [9,10,11,12]
]

# 행과 열을 전치시키는 리스트 컴프리헨션
[[row[i] for row in matrix] for i in range(4)]

# 위와 같음
transposed = []
for i in range(4):
  transposed.append([row[i] for row in matrix])
transposed

# zip() 함수
list(zip(*matrix)) # 병렬처리, 아래 예시를 보면 이해할 수 있음

print(matrix)
print(*matrix)

# zip() 함수의 사용방법
# 병렬처리 예시
for number, upper, lower in zip("12345", "ABCDE", "abcde"):
  print(number, upper, lower)

# 5.2 del 문
# 리스트에서 값 대신에 인덱스를 사용해서 항목을 삭제하는 방법
a = [-1, 1, 66.25, 333, 333, 1234.5]

del a[0]
a

del a[2:4] # 4는 포함안됨
a

del a[:]
a

del a # 변수 자체를 삭제하는데에도 사용
# a # 이후에 a를 참조하는 것은 에러

# 5.3 튜플과 시퀀스
# 시퀀스 자료형(list, tuple, range, string..): 인덱싱, 슬라이싱 연산 등의 성질을 공유함
t = 12345, 54321, 'hello!' # 튜플은 쉼표로 구분
t[0]

t

u = t, (1,2,3,4,5)
u

# t[0]=8888 # 튜플은 불변

# 그러나 튜플은 가변객체인 리스트를 포함할 수 있다.
v=([1,2,3],[3,2,1])
v[0][1] = 4
v

# 빈 튜플은 빈 괄호 쌍
empty = ()
singleton = 'hello',
string = 'hello'
print(len(empty))
print(len(singleton)) # 쉼표 있으면 한개짜리 튜플이 됨
print(len(string)) # 쉼표 없으면 그냥 문자열임
singleton, string


# 하나의 항목으로 구성된 튜플은 값 뒤에 쉼표

# 튜플 패킹
t = 12345, 54321, 'hello!'
t

x, y, z = t
x, y, z # 시퀀스 언 패킹. 튜플이 세 개의 변수에 나눠 들어감. 좌우 같은 개수의 변수가 와야함.

# 5.4 집합
#  집합은 중복되는 요소가 없는 순서 없는 컬렉션
# 용도: 멤버십 검사와 중복 엔트리 제거
# 집합을 만들 때는 중괄호나 set() 함수를 사용, 빈 집합은 항상 set() 사용
basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
print(basket)

'orange' in basket

'crabgrass' in basket

a = set('abracadabra')
b = set('alacazam')
a

a-b

a | b # OR: letters in a or b or both

a & b # AND: letters in both a and b

a ^ b # letters in a or b but not both

# 집합 컴프리헨션
a = { x for x in 'abracadabra' if x not in 'abc'}
a

# 5.5 딕셔너리
# 딕셔너리는 키 로 인덱싱, 
# key: 문자열과 숫자O, 모든 불변형을 사용가능, 튜플O, 그러나 튜플이 직간접적으로 가변객체를 포함하면X, 리스트x
tel = {'jack': 4098, 'sape': 4139} # 키:값
tel['guido'] = 4127
tel

tel['jack']

del tel['sape'] # 삭제.
tel

tel['irv'] = 4127 # 삽입 순서대로 들어가는건 아니구나
tel

list(tel) # 모든 키값을 삽입 순서대로 보여준다

sorted(tel) # key를 알파벳 순서대로 정렬

'guido' in tel

'jack' not in tel

# dict() 생성자는 키-값 쌍들의 시퀀스로 부터 직접 딕셔너리를 구성
dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])

# 딕셔너리 컴프리헨션은 임의의 키와 값 표현식들로 부터 딕셔너리를 만드는데 사용
 {x: x**2 for x in (2,4,6)}

# 키가 간단한 문자열일 때, 때로 키워드 인자들을 사용해서 쌍을 지정가능
dict(sape=4139, guido=4127, jack=4098)

# 5.6 루프 테크닉
# 딕셔너리 루핑: items(), 키와 대응하는 값
knights = {'gallahad': 'the pure', 'robin': 'the brave'}
for k, v in knights.items():
  print(k,'-', v)

# 시퀀스 루핑: enumerate(), 위치 인덱스와 대응하는 값
for i, v in enumerate(['tic','tac','toe']):
  print(i, v)

# 둘이나 그 이상의 시퀀스를 동시에 루핑하려면, zip() 함수로 엔트리들의 쌍을 만들 수 있음
questions = ['name', 'quest', 'favorite color']
answers = ['lancelot', 'the holy grail', 'blue']
for q, a in zip(questions, answers):
  print('What is your {0}? It is {1}.'.format(q,a))

for i in reversed(range(1, 10, 2)):
  print(i)

basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
for i in sorted(basket):
  print(i)
basket # 원래 basket은 건드리지않음
# basket.sort() # 원래 basket자체를 sorting하는 메소드

# set() 중복요소 제거
basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
for f in sorted(set(basket)):
  print(f)

# 루프를 돌고있는 리스트를 변경하는 것은 안전하지않음. 새 리스트 만들기
import math
raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]
filtered_data = []
for value in raw_data:
  if not math.isnan(value):
    filtered_data.append(value)
filtered_data

# 5.7 조건 더 보기
# 우선순위: (not - and - or), 예시:  A and not B or C = (A and (not B)) or C
string1, string2, string3 = '', 'Hammer Dance', 'Trondheim'
non_null = string1 or string2 or string3
non_null # 왼쪽에서 오른쪽으로 값이 구해지고, 결과가 결정되자마자 값 구하기는 중단됨.

# 5.8 시퀀스와 다른 형들을 비교하기
# 먼저 첫 두 항목을 비교해서 다르면 이것이 비교의 결과를 결정합니다; 같으면, 다음 두 항목을 비교하고, 이런 식으로 어느 한 시퀀스가 소진될 때까지 계속합니다. 
(1, 2, 3) < (1, 2, 4)

[1, 2, 3]              < [1, 2, 4]

'ABC' > 'ABB'

'ABC' < 'C' < 'Pascal' < 'Python'

'Pascal' < 'Python'

(1, 2, 3, 4)           < (1, 2, 4)

(1, 2)                 < (1, 2, -1)

(1, 2, 3)             == (1.0, 2.0, 3.0)

(1, 2, ('aa', 'ab'))   < (1, 2, ('abc', 'a'),4)